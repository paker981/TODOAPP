{
    "pipes": [],
    "interfaces": [
        {
            "name": "Column",
            "id": "interface-Column-01783846b5d413056ff5d50a39d52f6943de50dec159b7ada57b1cd2b38f8d5df9ffe37f1e87985e7ea31c5666e0e1d02357a15dae37e312a115021eb62956f0",
            "file": "src/app/types/column.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from \"@angular/forms\";\r\nimport { Task } from \"./task.types\";\r\n\r\nexport interface Column {\r\n    id: number,\r\n    name: string,\r\n    tasks: Task[]\r\n}\r\n\r\nexport type ColumnForm ={\r\n    name: FormControl<string>\r\n}\r\n\r\nexport type ColumnDialogData = {\r\n    editMode: boolean,\r\n    data?: Column\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Logger",
            "id": "interface-Logger-584c7fce4c4ef4d014e12a5dc67b93a794b6a3d43abab4eca3d7c0802c976e2dce743af4da7ed0aecd07d3ab498ea846039b4357c398b16e3640407fed87245a",
            "file": "src/app/interfaces/logger.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Logger {\r\n    log(message: string): void\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "ProfileInterface",
            "id": "interface-ProfileInterface-523592da5ae6b8a99738bfe3e2f2f242f869620fe18f0ce7172b2cd0ed4dfbbdc15146a5ab6d87ad7df2f352222a955f6a85f166a51bf3f1a5c537fa419f7215",
            "file": "src/app/services/logger.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { Logger } from '../interfaces/logger';\nimport { environment } from 'src/environments/environment';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\n\ninterface UserInterface {\n  id: number,\n  name: string,\n  age: number,\n  getMessage(): string\n}\n\ninterface ProfileInterface {\n  name: string,\n  profileUrl: string,\n  isActive: boolean\n}\n\nconst transform = (user: UserInterface, isActive: boolean = true): ProfileInterface => {\n  return {\n    name: user.name,\n    profileUrl: `/profiles/${user.name}`,\n    isActive\n  }\n}\n\n@Injectable()\nexport class LoggerService {\n\n  constructor(@Inject(MODULE_TOKEN) private token: string \n              ) { }\n\n  log(message: string): void {\n    console.log(`This message came from: ${this.token}: ${message}`)\n  }\n\n  logEnvironment() {\n    console.log(`Current environment: ${environment.token}`);\n  }\n\n}\n\n\n",
            "properties": [
                {
                    "name": "isActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "profileUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "StorageAbstractService",
            "id": "interface-StorageAbstractService-1bcac823213d6cad5d9f4b8585321a5676b7fbad668593ecbda1ec373808f0346c112c4acef90578de8229ce331e85414bc94f249dce5b4564602e23b75ab6fb",
            "file": "src/app/helpers/helpers.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { v4 as uuidv4 } from 'uuid';\r\nimport { Column } from '../types/column.types';\r\n\r\nexport function arrayEqual<T>(arr1: T[], arr2: T[]): boolean {\r\n    // Sprawdzanie, czy obie tablice zawierajÄ… te same elementy\r\n    const set1 = new Set(arr1);\r\n    const set2 = new Set(arr2);\r\n\r\n    if (set1.size !== set2.size) {\r\n        return false;\r\n    }\r\n\r\n    for (const item of set1) {\r\n        if (!set2.has(item)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function generateUUID(): string {\r\n    return uuidv4();\r\n  }\r\n\r\n\r\n  export interface StorageAbstractService {\r\n    getData(): Column[];\r\n    saveData(columns: Column[]): void\r\n  }",
            "properties": [],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Column[]",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveData",
                    "args": [
                        {
                            "name": "columns",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-2302771bd2d374b1017f7061b99e8208e33c1ae10a7da42e6861933724ff5d88ec7b4f9127b1a9ca946214fe6bf8ae10c4b533d6ab2a6d568733493a5002799f",
            "file": "src/app/types/task.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from \"@angular/forms\"\r\n\r\nexport enum Priority {\r\n    HIGH = 'high',\r\n    MEDIUM = 'medium',\r\n    LOW = 'low'\r\n}\r\n\r\nexport interface Task {\r\n    id: string,\r\n    title: string,\r\n    description: string,\r\n    priority: Priority\r\n    done: boolean\r\n}\r\n\r\nexport type TaskForm = {\r\n    title: FormControl<string>,\r\n    description: FormControl<string>,\r\n    priority: FormControl<Priority>\r\n}\r\n\r\nexport type TaskDialogData = {\r\n    editMode: boolean,\r\n    data?: Task\r\n}",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "done",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Priority",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "UserInterface",
            "id": "interface-UserInterface-523592da5ae6b8a99738bfe3e2f2f242f869620fe18f0ce7172b2cd0ed4dfbbdc15146a5ab6d87ad7df2f352222a955f6a85f166a51bf3f1a5c537fa419f7215",
            "file": "src/app/services/logger.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { Logger } from '../interfaces/logger';\nimport { environment } from 'src/environments/environment';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\n\ninterface UserInterface {\n  id: number,\n  name: string,\n  age: number,\n  getMessage(): string\n}\n\ninterface ProfileInterface {\n  name: string,\n  profileUrl: string,\n  isActive: boolean\n}\n\nconst transform = (user: UserInterface, isActive: boolean = true): ProfileInterface => {\n  return {\n    name: user.name,\n    profileUrl: `/profiles/${user.name}`,\n    isActive\n  }\n}\n\n@Injectable()\nexport class LoggerService {\n\n  constructor(@Inject(MODULE_TOKEN) private token: string \n              ) { }\n\n  log(message: string): void {\n    console.log(`This message came from: ${this.token}: ${message}`)\n  }\n\n  logEnvironment() {\n    console.log(`Current environment: ${environment.token}`);\n  }\n\n}\n\n\n",
            "properties": [
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "methods": [
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ColumnService",
            "id": "injectable-ColumnService-a2825bca600853e88d005c489172b13ea50ca346580ed7320464d58bcd2b45730034fcf2930ffde2f65975ce2985e64d5af543751688555a93c36f2c2b8099b0",
            "file": "src/app/modules/todo/services/column.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "updatedColumn",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updatedColumn",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport { Column } from 'src/app/types/column.types';\n\n@Injectable()\nexport class ColumnService {\n\n  constructor(private dataProviderService: DataProviderService) { }\n\n  add(column: Column): void {\n    const columns = this.dataProviderService.getData();\n    column.tasks =[];\n    column.id = columns.length;\n    columns.push(column);\n    this.dataProviderService.saveData(columns);\n  }\n\n  remove(index: number): void {\n    const columns = this.dataProviderService.getData();\n    columns.splice(index, 1);\n    columns.forEach((column,index)=>column.id=index)\n    this.dataProviderService.saveData(columns);\n  }\n\n  edit(updatedColumn: Column,columnIndex: number){\n    const columns = this.dataProviderService.getData();\n    columns[columnIndex].name = updatedColumn.name;\n    this.dataProviderService.saveData(columns);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DataProviderService",
            "id": "injectable-DataProviderService-9085167c4a0f77f915249e532ba99de9991b61bfb5a31bfaf44546ff9a17703768a25c64eb9c7944fd9e80857e2401f9b9e9dd5affc9daaf16e14f043c007f0c",
            "file": "src/app/services/dataProvider/data-provider.service.ts",
            "properties": [
                {
                    "name": "_columns$",
                    "defaultValue": "new BehaviorSubject<Column[]>(this.storageService.getData())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "columns$",
                    "defaultValue": "this._columns$.asObservable().pipe(\n    tap(columns => this.storageService.saveData(columns)),\n    shareReplay(),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Column[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveData",
                    "args": [
                        {
                            "name": "columns",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columns",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { BehaviorSubject, Observable, share, shareReplay, tap } from 'rxjs';\nimport { Column } from 'src/app/types/column.types';\nimport { StorageService } from '../storage/storage.service';\nimport { STORAGE_TOKEN } from 'src/tokens/storageToken';\nimport { StorageAbstractService } from 'src/app/helpers/helpers';\nimport { Priority } from 'src/app/types/task.types';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\n\nexport class DataProviderService {\n  \n  private readonly _columns$ = new BehaviorSubject<Column[]>(this.storageService.getData());\n  readonly columns$ = this._columns$.asObservable().pipe(\n    tap(columns => this.storageService.saveData(columns)),\n    shareReplay(),\n  );\n\n  constructor(@Inject(STORAGE_TOKEN) private storageService: StorageAbstractService) {\n    // this._columns$.subscribe(console.log)// \n    // this._columns$.subscribe((v) => {console.log(v)})// \n    // this._columns$.next(this.storageService.getData());\n  }\n\n  getData(): Column[]{\n    return this._columns$.getValue()\n  }\n\n  saveData(columns: Column[]): void {\n    this._columns$.next(columns);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageAbstractService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageAbstractService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LoggerService",
            "id": "injectable-LoggerService-523592da5ae6b8a99738bfe3e2f2f242f869620fe18f0ce7172b2cd0ed4dfbbdc15146a5ab6d87ad7df2f352222a955f6a85f166a51bf3f1a5c537fa419f7215",
            "file": "src/app/services/logger.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logEnvironment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { Logger } from '../interfaces/logger';\nimport { environment } from 'src/environments/environment';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\n\ninterface UserInterface {\n  id: number,\n  name: string,\n  age: number,\n  getMessage(): string\n}\n\ninterface ProfileInterface {\n  name: string,\n  profileUrl: string,\n  isActive: boolean\n}\n\nconst transform = (user: UserInterface, isActive: boolean = true): ProfileInterface => {\n  return {\n    name: user.name,\n    profileUrl: `/profiles/${user.name}`,\n    isActive\n  }\n}\n\n@Injectable()\nexport class LoggerService {\n\n  constructor(@Inject(MODULE_TOKEN) private token: string \n              ) { }\n\n  log(message: string): void {\n    console.log(`This message came from: ${this.token}: ${message}`)\n  }\n\n  logEnvironment() {\n    console.log(`Current environment: ${environment.token}`);\n  }\n\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StatisticService",
            "id": "injectable-StatisticService-3d0df20109adf7235178763f3b3ef3acc46bdf932a38b5847d05318cd5dfe3a44a8481e13c7a591692078c60322f2d1577ddc05123637a823546b31dc8bb0766",
            "file": "src/app/modules/statistic/services/statistic.service.ts",
            "properties": [
                {
                    "name": "columns$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StatisticData[]>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "calculate",
                    "args": [
                        {
                            "name": "data",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prepareDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "StatisticData",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable, inject } from '@angular/core';\nimport { Observable, map, tap } from 'rxjs';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { Column } from 'src/app/types/column.types';\nimport { Priority } from 'src/app/types/task.types';\n\nexport type StatisticData = {\n  name: string,\n  dataForChart: ChartData[]\n}\n\nexport type ChartData = {\n  name: string,\n  value: number\n}\n\n\n\n@Injectable()\nexport class StatisticService {\n  readonly columns$: Observable<StatisticData[]>;\n\n  constructor(private dataProviderService: DataProviderService,\n              private logger: LoggerService) {\n      this.logger.logEnvironment();  \n      this.logger.log('data loaded')\n      this.columns$ = this.dataProviderService.columns$.pipe(\n                      map(data => data.map((column)=>this.prepareDate(column))) // changeDetectionTrigger?\n);\n  }\n\n  private prepareDate(data: Column): StatisticData{\n    const amountOfTasks = data.tasks.length;\n    const [amountOfHigh,amountOfMedium,amountOfLow] = this.calculate(data)\n\n    // {name: data.name, dataForChart: }\n    return {\n      name: data.name,\n\n      dataForChart: [\n      {\n        name: Priority.HIGH,\n        value: amountOfTasks ? Math.round((amountOfHigh/amountOfTasks)*100) : 0, // Procentowy udziaÅ‚\n      },\n      {\n        name: Priority.MEDIUM,\n        value: amountOfTasks ? Math.round((amountOfMedium/amountOfTasks)*100) : 0,\n      },\n      {\n        name: Priority.LOW,\n        value: amountOfTasks ? Math.round((amountOfLow/amountOfTasks)*100) : 0,\n      },\n      ]\n    };\n  }\n\n  private calculate(data: Column): [number,number,number]{\n    return data.tasks.reduce((counts, task) => {\n      if (task.priority === Priority.HIGH) {\n        counts[0]++;\n      } else if (task.priority === Priority.MEDIUM) {\n        counts[1]++;\n      } else if (task.priority === Priority.LOW) {\n        counts[2]++;\n      }\n      return counts;\n    }, [0, 0, 0]);\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-6b8f3785012063bde8dd893be2b82302039e18d3b781a237b4a32d4081a5fd58095255032d95bc4604688a49d063051d9698fa63223318942e05efe2615aabd3",
            "file": "src/app/services/storage/storage.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ÉµparseCookieValue } from '@angular/common';\nimport { Injectable, Inject } from '@angular/core';\nimport { Column } from 'src/app/types/column.types';\nimport { STORAGE_TOKEN } from 'src/tokens/storageToken';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n  // AbstractStorageService - interfejs\n  // LocalStorageService\n  /*\n  private readonly storageKey = 'columns';\n\n  constructor(@Inject(STORAGE_TOKEN) private storage: Storage) { }\n\n  getData(): Column[] {\n    const columnsString = this.storage.getItem(this.storageKey); // osobny serwis StorageService => bo: 1.testy 2. open/close\n    return (columnsString ? JSON.parse(columnsString) : []) as Column[]\n  }\n\n  saveData(columns: Column[]): void {\n    this.storage.setItem(this.storageKey, JSON.stringify(columns));\n  }\n  */\n}\n\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TaskService",
            "id": "injectable-TaskService-e8808e33b2892abd0713817261218a54f17878bad072ce87bd78da802eb27b58b70a8d20f267049c6f718d46186220fa418e200626b8be6e867c4cda97fe737a",
            "file": "src/app/modules/todo/services/task.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeState",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport { Column } from 'src/app/types/column.types';\nimport { Task } from 'src/app/types/task.types';\n\n@Injectable()\nexport class TaskService {\n\n  constructor(private dataProviderService: DataProviderService) { }\n\n  changeState(columnId: number, taskIndex: number){\n    const columns = this.dataProviderService.getData();\n    const index = columns.findIndex((column)=> column.id === columnId)\n    if(index === -1){\n      return;\n    }\n    const itemToChange = columns[index].tasks[taskIndex].done;\n    columns[index].tasks[taskIndex].done = !itemToChange; \n    this.dataProviderService.saveData(columns);\n  }\n\n  edit(columnId: number, taskIndex: number, data: Task){\n    const columns = this.dataProviderService.getData();\n    const index = columns.findIndex((column)=> column.id === columnId)\n    if(index === -1){\n      return;\n    }\n    columns[index].tasks[taskIndex] = data; \n    this.dataProviderService.saveData(columns);\n  }\n\n  delete(columnId: number, taskIndex: number){\n    const columns = this.dataProviderService.getData();\n    const index = columns.findIndex((column)=> column.id === columnId)\n    if(index === -1){\n      return;\n    }\n    columns[index].tasks.splice(taskIndex,1); \n    this.dataProviderService.saveData(columns);\n  }\n\n  \n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TodoService",
            "id": "injectable-TodoService-d45b1ec0537dfddeb6b015c7ab2fb560e79eb5c59937ce48494b7addd5da069314bbc64e97235b4c26a1cdca2f51749cae7d101f92377ac7e79c69486b1e2d46",
            "file": "src/app/modules/todo/services/todo.service.ts",
            "properties": [
                {
                    "name": "data$",
                    "defaultValue": "this.dataProviderService.columns$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Column[]>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addTaskToColumn",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTaskFromColumn",
                    "args": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "taskIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateColumnTasks",
                    "args": [
                        {
                            "name": "columnTasks",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnTasks",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateItemsInColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tasks",
                            "type": "Task[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject, inject } from '@angular/core';\nimport { Observable, tap } from 'rxjs';\nimport { arrayEqual, generateUUID } from 'src/app/helpers/helpers';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { Column } from 'src/app/types/column.types';\nimport { Task } from 'src/app/types/task.types';\n\n@Injectable()\nexport class TodoService {\n  data$: Observable<Column[]> = this.dataProviderService.columns$;\n\n  constructor(\n              private dataProviderService: DataProviderService,\n              private loggerService: LoggerService \n              ) { \n              this.loggerService.logEnvironment();  \n              this.loggerService.log('test Todo');\n             }\n\n  // getData(){\n  //   return this.data$;\n  // }           \n\n  addTaskToColumn(columnIndex: number, task: Task): void {\n    task.done = false;\n    task.id = generateUUID()\n    const columns = this.dataProviderService.getData();\n    columns[columnIndex].tasks.push(task);\n    this.dataProviderService.saveData(columns);\n  }\n\n  removeTaskFromColumn(columnIndex: number, taskIndex: number): void {\n    const columns = this.dataProviderService.getData();\n    columns[columnIndex].tasks.splice(taskIndex, 1);\n    this.dataProviderService.saveData(columns);\n  }\n\n  updateColumnTasks(columnTasks: Task[],columnIndex: number): void {\n    const columns = this.dataProviderService.getData();\n      columns[columnIndex].tasks = [...columnTasks];\n      this.dataProviderService.saveData(columns);\n  }\n\n  updateItemsInColumn(columnId: number, tasks: Task[]): void {\n    const columns = this.dataProviderService.getData();\n    const index = columns.findIndex((column)=> column.id === columnId)\n    if(index === -1){\n      return;\n    }\n    columns[index].tasks = tasks;\n    this.dataProviderService.saveData(columns);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loggerService",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dataProviderService",
                        "type": "DataProviderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loggerService",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "LocalStorageService",
            "id": "class-LocalStorageService-7e6615cde744d34e273bec165dd2de118e84dc29d9caa67db2f03c4aaf3bb7849e8f200820780088af853c83932256d93660a5363eae52ab337679a5854538a7",
            "file": "src/app/helpers/localStorage.class.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Inject } from \"@angular/core\";\r\nimport { Column } from \"../types/column.types\";\r\nimport { StorageAbstractService } from \"./helpers\";\r\n\r\nexport class LocalStorageService implements StorageAbstractService {\r\n\r\nprivate readonly storageKey = 'columns';\r\n\r\nconstructor() { }\r\n\r\ngetData(): Column[] {\r\n  const columnsString = localStorage.getItem(this.storageKey); // osobny serwis StorageService => bo: 1.testy 2. open/close\r\n  return (columnsString ? JSON.parse(columnsString) : []) as Column[]\r\n}\r\n\r\nsaveData(data: Column[]): void {\r\n  localStorage.setItem(this.storageKey, JSON.stringify(data));\r\n}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "properties": [
                {
                    "name": "storageKey",
                    "defaultValue": "'columns'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Column[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveData",
                    "args": [
                        {
                            "name": "data",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Column[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "StorageAbstractService"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d8b348e7fbf5fba18d7ca6329754f6599d10d1afa61be42a969e6d95247825d1d131d5036c1a771268225ddbc2c1bee590a6d6e73e1c603450f06859b7884779",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'TODO'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'TODO';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "\n<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-0e24c9f955cf7054f9ce05bd15c94ba2bcf2d530bf9f9dbafcb70b58a5812b5d25ff812eee8abe5897d6d1b76c2cfa9ecda7238819661dfb3c964be380516702",
            "file": "src/app/modules/statistic/statistic-container/chart/chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart",
            "styleUrls": [
                "./chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "StatisticData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showXAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showYAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 400]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Priority'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Percentage%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Column } from 'src/app/types/column.types';\nimport { Priority } from 'src/app/types/task.types';\nimport { StatisticData } from '../../services/statistic.service';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n  // onPush\n})\nexport class ChartComponent {\n  @Input() set data (value: StatisticData) {\n    this.chartData = value.dataForChart;\n  };\n\n  protected view: [number,number] = [700, 400];\n  protected chartData!: any[];\n  protected showXAxis = true;\n  protected showYAxis = true;\n  protected showLegend = true;\n  protected showXAxisLabel = true;\n  protected showYAxisLabel = true;\n  protected xAxisLabel = 'Priority';\n  protected yAxisLabel = 'Percentage%';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chart.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "StatisticData",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "StatisticData",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ngx-charts-bar-vertical\n  [view]=\"view\"\n  [results]=\"chartData\"\n  [xAxis]=\"showXAxis\"\n  [yAxis]=\"showYAxis\"\n  [legend]=\"showLegend\"\n  [showXAxisLabel]=\"showXAxisLabel\"\n  [showYAxisLabel]=\"showYAxisLabel\"\n  [xAxisLabel]=\"xAxisLabel\"\n  [yAxisLabel]=\"yAxisLabel\">\n</ngx-charts-bar-vertical>"
        },
        {
            "name": "ColumnDialogComponent",
            "id": "component-ColumnDialogComponent-5092dd0636517af41a8c49c654a6ed0fe98d2dff15476fa71b6d2a1cf43a18e68ab213f801866b2dc693f6169ea1624b38b3543a302cf4b220fe3beebdeb2352",
            "file": "src/app/modules/todo/dialogs/column-dialog/column-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-column-dialog",
            "styleUrls": [
                "./column-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./column-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ColumnForm>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setControlsValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { ColumnDialogData, ColumnForm } from 'src/app/types/column.types';\n\n@Component({\n  selector: 'app-column-dialog',\n  templateUrl: './column-dialog.component.html',\n  styleUrls: ['./column-dialog.component.css']\n})\nexport class ColumnDialogComponent {\n  protected form: FormGroup<ColumnForm>;\n  protected isEditable!: boolean;\n\n  constructor(@Inject(MAT_DIALOG_DATA) private data: ColumnDialogData,\n    private dialogRef: MatDialogRef<ColumnDialogComponent>){\n    this.form = new FormGroup<ColumnForm>({\n      name: new FormControl('', Validators.required) as FormControl<string>\n    })\n\n    this.isEditable = data.editMode;\n\n    if(data.editMode){\n      this.setControlsValue()\n    }\n  }\n\n  onSubmit(): void{\n    if(this.form.invalid){\n      return;\n    }\n    this.dialogRef.close(this.form.value);\n  }\n\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  setControlsValue(){\n    if(this.data.data){\n      this.form.controls.name.setValue(this.data.data.name);\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .dialog-header h2 {\r\n    margin: 0;\r\n  }\r\n  \r\n  .dialog-header button {\r\n    margin: 0;\r\n  }",
                    "styleUrl": "./column-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "ColumnDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ColumnDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "ColumnDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ColumnDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ol>\n    <div mat-dialog-content>\n      <div class=\"dialog-header\">\n        <h2 mat-dialog-title>Add column</h2>\n        <div>\n          <button mat-icon-button mat-dialog-close><mat-icon>close</mat-icon></button>\n        </div>\n      </div>\n        \n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        \n        <ng-container>\n            <mat-form-field>\n                <input matInput placeholder=\"Title\" [formControl]=\"form.controls.name\">\n                <mat-error *ngIf=\"form.controls.name.hasError('required')\">Name is required</mat-error>\n            </mat-form-field>\n          </ng-container>\n        <div>\n          <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n          <button mat-raised-button mat-dialog-close color=\"warn\">Cancel</button>\n        </div>\n        </form>\n    </div>\n  </ol>\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-3f25278c1118a33e00b2a0d319158d6b340531a2c78e301731f7424053ca7a2c4744498a1b9820b3a7391d8e5c3284e4a1c2be5940907995df2af5b04122f9c7",
            "file": "src/app/container/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tabGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTabGroup",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTabGroup"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTabGroup } from '@angular/material/tabs';\nimport { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-container',\n  templateUrl: './container.component.html',\n  styleUrls: ['./container.component.css']\n})\nexport class ContainerComponent implements AfterViewInit,OnInit {\n\n  @ViewChild(MatTabGroup) tabGroup!: MatTabGroup;\n  constructor(private router: Router, private route: ActivatedRoute){}\n\n  ngOnInit(): void {}\n\n  onChange(index: number){\n    if(index === 0){\n      this.router.navigate(['/todo']);\n    } else if (index===1){\n      this.router.navigate(['/statistics'])\n    }\n    \n  }\n\n  ngAfterViewInit() {\n   const path = this.router.routerState.snapshot.url;\n \n    if (path === '/todo') {\n      this.tabGroup.selectedIndex = 0;\n    } else if (path === '/statistics') {\n      this.router.navigate(['/todo'])\n      this.tabGroup.selectedIndex = 1;\n   } \n  }\n/*\n    this.route.url.subscribe(urlSegments => {\n      console.log(urlSegments)\n      const path = urlSegments.join('/'); // Konwertuj segmenty URL na Å›cieÅ¼kÄ™\n\n      console.log(path)\n      \n    });\n    */\n  }\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnInit"
            ],
            "templateData": "<mat-tab-group (selectedIndexChange)=\"onChange($event)\">\n  <mat-tab label=\"TODO List\">\n<!-- To jest miejsce na Å‚adowanie TodoModule -->\n  </mat-tab>\n  <mat-tab label=\"Statistics\" [routerLink]=\"['/sta']\"> <!--routerLink tu nie dziala   <div mat-tab-nav-bar> -->\n <!-- To jest miejsce na Å‚adowanie StatisticsModule -->\n  </mat-tab>\n</mat-tab-group>\n\n<router-outlet></router-outlet>\n\n<!-- <ng-template>\n  <router-outlet></router-outlet>\n</ng-template> -->\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ItemDialogComponent",
            "id": "component-ItemDialogComponent-1e6e95c0582b11c5aaa6ffc8251666114ab7b9be1b5949ad2b537d6b1d5a716b202631a4d659e557c6280a89c501314af97cc308b5bc39529a4edba7a4b98905",
            "file": "src/app/modules/todo/dialogs/item-dialog/item-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-item-dialog",
            "styleUrls": [
                "./item-dialog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./item-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<TaskForm>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "isEditable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "priorities",
                    "defaultValue": "Priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setControlsValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Priority, TaskDialogData, TaskForm } from 'src/app/types/task.types';\n\n@Component({\n  selector: 'app-item-dialog',\n  templateUrl: './item-dialog.component.html',\n  styleUrls: ['./item-dialog.component.css']\n})\nexport class ItemDialogComponent {\n\n  protected form: FormGroup<TaskForm>;\n  protected priorities = Priority;\n  protected isEditable!: boolean;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) private data: TaskDialogData,\n    private dialogRef: MatDialogRef<ItemDialogComponent>\n  ){\n\n    this.isEditable = this.data.editMode;\n\n    this.form = new FormGroup<TaskForm>({\n      title: new FormControl('', Validators.required) as FormControl<string>,\n      description: new FormControl('', Validators.required) as FormControl<string>,\n      priority: new FormControl(''as unknown as Priority, Validators.required) as FormControl<Priority>\n    })\n\n    if(this.isEditable){\n      this.setControlsValue()\n    }\n  }\n\n  onSubmit(): void{\n    if(this.form.invalid){\n      return;\n    }\n    this.dialogRef.close(this.form.value);\n  }\n\n  closeDialog(): void {\n    this.dialogRef.close();\n  }\n\n  setControlsValue(){\n    if(this.data.data){\n      this.form.controls.title.setValue(this.data.data.title)\n      this.form.controls.description.setValue(this.data.data.description)\n      this.form.controls.priority.setValue(this.data.data.priority)\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dialog-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .dialog-header h2 {\r\n    margin: 0;\r\n  }\r\n  \r\n  .dialog-header button {\r\n    margin: 0;\r\n  }",
                    "styleUrl": "./item-dialog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "TaskDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "TaskDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ItemDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<ol>\n    <div mat-dialog-content>\n      <div class=\"dialog-header\">\n        <h2 mat-dialog-title>{{isEditable ? 'Edit item' : 'Add item'}}</h2>\n        <div>\n          <button mat-icon-button mat-dialog-close><mat-icon>close</mat-icon></button>\n        </div>\n      </div>\n        \n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n        \n        <ng-container>\n            <mat-form-field>\n                <input matInput placeholder=\"Title\" [formControl]=\"form.controls.title\">\n                <mat-error *ngIf=\"form.controls.title.hasError('required')\">Title is required</mat-error>\n              </mat-form-field>\n            \n              <mat-form-field>\n                <textarea matInput placeholder=\"Description\" [formControl]=\"form.controls.description\"></textarea>\n                <mat-error *ngIf=\"form.controls.description.hasError('required')\">Description is required</mat-error>\n              </mat-form-field>\n            \n              <mat-form-field>\n                <mat-label>Priority</mat-label>\n                <mat-select [formControl]=\"form.controls.priority\">\n                  <mat-option *ngFor=\"let priority of priorities | keyvalue\" [value]=\"priority.value\">{{ priority.value }}</mat-option>\n                </mat-select>\n                <mat-error *ngIf=\"form.controls.priority.hasError('required')\">Priority is required</mat-error>\n              </mat-form-field>\n          </ng-container>\n\n          <div>\n          <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n          <button mat-raised-button mat-dialog-close color=\"warn\">Cancel</button>\n          </div>\n        </form>\n    </div>\n  </ol>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "StatisticContainerComponent",
            "id": "component-StatisticContainerComponent-d4757943a1dab7f300db6cb38abb8fe3af74644e8ca84d52092dbb528267fc4428ba3789595c2d6acfd3875968792a2ccc57c8a7c91ff0a5242e70cab3333d04",
            "file": "src/app/modules/statistic/statistic-container/statistic-container.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-statistic-container",
            "styleUrls": [
                "./statistic-container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./statistic-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns$",
                    "defaultValue": "this.statisticService.columns$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<StatisticData[]>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ObserversModule } from '@angular/cdk/observers';\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport { Column } from 'src/app/types/column.types';\nimport { StatisticData, StatisticService } from '../services/statistic.service';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\nimport { ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'app-statistic-container',\n  templateUrl: './statistic-container.component.html',\n  styleUrls: ['./statistic-container.component.css'],\n  providers: [\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class StatisticContainerComponent {\n\n  protected columns$: Observable<StatisticData[]> = this.statisticService.columns$;\n\n  constructor(private statisticService: StatisticService) {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./statistic-container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statisticService",
                        "type": "StatisticService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "statisticService",
                        "type": "StatisticService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div>\n    <div *ngFor=\"let column of columns$ | async let columnIndex = index\">\n        <mat-card>\n            <mat-card-header>\n                <mat-card-title>Column: {{column.name}}</mat-card-title>\n            </mat-card-header>\n            <mat-card-content>\n                <app-chart [data]=\"column\"></app-chart>\n             </mat-card-content>  \n        </mat-card>\n        <br>\n    </div>\n</div>"
        },
        {
            "name": "TodoColumnComponent",
            "id": "component-TodoColumnComponent-52a90851b13d9f1a5808a7a7b261082b85c6df50dbb1d85da1232d603e39d04eaef692ecfd6da735dae878e10a37c757b998b843d5d3489b44d7d315424d1031",
            "file": "src/app/modules/todo/todo-container/todo-column/todo-column.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-column",
            "styleUrls": [
                "./todo-column.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-column.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "Column",
                    "decorators": []
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "itemDropped",
                    "defaultValue": "new EventEmitter<CdkDragDrop<Column>>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addTaskToColumn",
                    "args": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Column>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Column>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "task",
                            "type": "Task",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ViewContainerRef } from '@angular/core';\nimport { Column } from 'src/app/types/column.types';\nimport { ItemDialogComponent } from '../../dialogs/item-dialog/item-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { filter } from 'rxjs';\nimport { TodoService } from '../../services/todo.service';\nimport { Task, TaskDialogData } from 'src/app/types/task.types';\nimport { ColumnDialogComponent } from '../../dialogs/column-dialog/column-dialog.component';\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { TodoTaskComponent } from '../todo-task/todo-task.component';\nimport { ColumnService } from '../../services/column.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-todo-column',\n  templateUrl: './todo-column.component.html',\n  styleUrls: ['./todo-column.component.css']\n})\nexport class TodoColumnComponent {\n  @Input() data!: Column;\n  @Input() index!: number;\n  @Output() itemDropped = new EventEmitter<CdkDragDrop<Column>>;\n\n  constructor(\n              private dialog: MatDialog,\n              private todoService: TodoService,\n              private columnService: ColumnService\n            ) {}\n\n  onItemDrop(event: CdkDragDrop<Column>): void {\n    this.itemDropped.emit(event);\n  }  \n\n  addTaskToColumn(columnId: number) {\n    const dialogRef = this.dialog.open(ItemDialogComponent, {width: '400px', height:'500px', data: {editMode: false} as TaskDialogData })\n\n    dialogRef.afterClosed().pipe(\n      untilDestroyed(this),\n      filter(Boolean), // {} // najlepiej true i false\n    ).subscribe((data: Task) => this.todoService.addTaskToColumn(columnId,data));\n  }\n\n  editColumn(){\n    const dialogRef = this.dialog.open(ColumnDialogComponent, {width: '400px', height:'250px', data: {editMode: true, data: this.data}})\n\n    dialogRef.afterClosed().pipe(\n      untilDestroyed(this),\n      filter(Boolean), // {} // najlepiej true i false\n    ).subscribe((updatedData: Column) => this.columnService.edit(updatedData,this.data.id));\n  }\n\n  deleteColumn(){\n    this.columnService.remove(this.data.id);\n  }\n\n  trackById(index: number, task: Task){\n    return task.id;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".column-header {\r\n    background-color: #f0f0f0;\r\n    padding: 8px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  \r\n\r\n  .item-icons {\r\n    background-color: #f0f0f0;\r\n    padding: 8px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .items-list {\r\n    flex: 1;\r\n    min-height: 40px;\r\n    background-color: #f9f9f9;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: auto;\r\n  }\r\n  \r\n",
                    "styleUrl": "./todo-column.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "columnService",
                        "type": "ColumnService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "columnService",
                        "type": "ColumnService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"column-header\">\n    {{ data.name }}\n    <div>\n        <mat-icon [matMenuTriggerFor]=\"matMenu\">more_horiz</mat-icon>\n        <mat-menu #matMenu=\"matMenu\" class=>\n            <button mat-menu-item (click)=\"editColumn()\">Edit<mat-icon class=\"icon\">edit</mat-icon></button>\n            <button mat-menu-item (click)=\"deleteColumn()\">Delete<mat-icon class=\"icon\">delete</mat-icon></button>\n      </mat-menu>\n      <mat-icon (click)=\"addTaskToColumn(index)\">add</mat-icon>\n    </div>\n</div>\n\n<div class=\"items-list\" cdkDropList [cdkDropListData]=\"data\" (cdkDropListDropped)=\"onItemDrop($event)\">\n    <div *ngFor=\"let task of data.tasks; trackById let taskIndex = index\" cdkDrag>\n        <app-todo-task\n            #ref \n            [data]=\"task\" \n            [index]=\"taskIndex\"\n            [columnId]=\"data.id\">\n        </app-todo-task>\n    </div>\n</div>\n\n\n"
        },
        {
            "name": "TodoContainerComponent",
            "id": "component-TodoContainerComponent-a51623801d1d0bddc9c95aeac0e8baf193c625c9012b31393af5567bfdfd726e2d4d509ba4cebc65757cfab357e7757a475771c5d43bfc0d7bae5db2965e7345",
            "file": "src/app/modules/todo/todo-container/todo-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-container",
            "styleUrls": [
                "./todo-container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns$",
                    "defaultValue": "this.todoService.data$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Column[]>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addColumn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Column>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Column>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackById",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  transferArrayItem,\n} from '@angular/cdk/drag-drop';\nimport { DataProviderService } from 'src/app/services/dataProvider/data-provider.service';\nimport {  Priority, Task, TaskDialogData } from 'src/app/types/task.types';\nimport { Column } from 'src/app/types/column.types';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ColumnDialogComponent } from '../dialogs/column-dialog/column-dialog.component';\nimport { BehaviorSubject, Observable, filter } from 'rxjs';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { ItemDialogComponent } from '../dialogs/item-dialog/item-dialog.component';\nimport { TodoService } from '../services/todo.service';\nimport { TodoTaskComponent } from './todo-task/todo-task.component';\nimport { TodoColumnComponent } from './todo-column/todo-column.component';\nimport { ColumnService } from '../services/column.service';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\n\n\n@UntilDestroy()\n@Component({\n  selector: 'app-todo-container',\n  templateUrl: './todo-container.component.html',\n  styleUrls: ['./todo-container.component.css'],\n  providers: [\n \n  ]\n})\nexport class TodoContainerComponent {\n\n  protected columns$: Observable<Column[]> = this.todoService.data$;\n\n  constructor(\n              private dialog: MatDialog,\n              private todoService: TodoService,\n              private columnService: ColumnService,\n              ){}\n\n  onItemDrop(event: CdkDragDrop<Column>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data.tasks, event.previousIndex, event.currentIndex);\n      this.todoService.updateItemsInColumn(event.container.data.id, event.container.data.tasks);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data.tasks,\n        event.container.data.tasks,\n        event.previousIndex,\n        event.currentIndex\n      );\n      this.todoService.updateItemsInColumn(event.previousContainer.data.id, event.previousContainer.data.tasks);\n      this.todoService.updateItemsInColumn(event.container.data.id, event.container.data.tasks);\n    }\n  }\n\n  addColumn(){\n    const dialogRef = this.dialog.open(ColumnDialogComponent, {width: '400px', height:'250px', data: {editMode: false}})\n    dialogRef.afterClosed().pipe(\n      untilDestroyed(this),\n      filter(Boolean), // {} // najlepiej true i false\n    ).subscribe((data: Column) => this.columnService.add(data));\n  }\n\n  trackById(index: number, column: Column){\n    return column.id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".columns-container {\r\n    display: flex;\r\n  }\r\n  \r\n  .column {\r\n    flex: 1;\r\n    border: 1px solid #ccc;\r\n    margin: 8px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: hidden;\r\n  }\r\n\r\n  .column-add {\r\n    flex: 0.5;\r\n    border: 1px solid #ccc;\r\n    margin: 8px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    text-align: center;\r\n    align-items: center;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .icon {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  \r\n\r\n  ",
                    "styleUrl": "./todo-container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "columnService",
                        "type": "ColumnService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "columnService",
                        "type": "ColumnService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div cdkDropListGroup>\n<div class=\"columns-container\">\n    <div class=\"column\" *ngFor=\"let column of columns$ | async; trackById let columnIndex = index\">\n      <app-todo-column \n          [data]=\"column\" \n          [index]=\"columnIndex\"\n          (itemDropped)=\"onItemDrop($event)\"\n          >\n      </app-todo-column>\n    </div>\n    <div class=\"column-add\" (click)=\"addColumn()\">\n      Add another column \n      <mat-icon>add</mat-icon>\n  </div>\n</div>"
        },
        {
            "name": "TodoTaskComponent",
            "id": "component-TodoTaskComponent-b05738c8b986fc88edaf86b64239bc006ab70bb98476255eb5b264e40a9e31416379ee93dfcb8cdcbb22e2343d9d73d6fad80ccb7101be16175ec1a75ce7796d",
            "file": "src/app/modules/todo/todo-container/todo-task/todo-task.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-task[columnId]",
            "styleUrls": [
                "./todo-task.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "columnId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 20,
                    "type": "Task",
                    "decorators": []
                },
                {
                    "required": true,
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "optional": false,
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "changeState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { Task, TaskDialogData } from 'src/app/types/task.types';\nimport { TodoService } from '../../services/todo.service';\nimport { ItemDialogComponent } from '../../dialogs/item-dialog/item-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { filter } from 'rxjs';\nimport { TaskService } from '../../services/task.service';\nimport { LoggerService } from 'src/app/services/logger.service';\n\n@UntilDestroy()\n@Component({\n  selector: 'app-todo-task[columnId]', //required better - angular 16\n  templateUrl: './todo-task.component.html',\n  styleUrls: ['./todo-task.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TodoTaskComponent implements OnInit {\n\n  @Input({required: true}) data!: Task;\n  @Input({required: true}) index!: number;\n  @Input() columnId!: number;\n\n  constructor(\n              private dialog: MatDialog,\n              private taskService: TaskService\n              ){}\n  ngOnInit(): void {\n    console.log(this.data)\n  }\n\n  changeState(){\n    this.taskService.changeState(this.columnId,this.index);\n  }\n\n  edit(){\n    const dialogRef = this.dialog.open(ItemDialogComponent, {width: '400px', height:'500px', data: {editMode: true, data: this.data} as TaskDialogData })\n\n    dialogRef.afterClosed().pipe(\n      untilDestroyed(this),\n      filter(Boolean), // {} // najlepiej true i false\n    ).subscribe((updatedData: Task) => this.taskService.edit(this.columnId,this.index,updatedData));\n\n  }\n\n  delete(){\n    this.taskService.delete(this.columnId,this.index)\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.item {\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    padding: 8px;\r\n    margin: 4px 0;\r\n    cursor: pointer;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .item-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .icon {\r\n    margin-left: 8px;\r\n  }",
                    "styleUrl": "./todo-task.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "taskService",
                        "type": "TaskService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "    <div  class=\"item\">\n    {{ data.title }}\n      <div class=\"item-container\">\n        <mat-checkbox (click)=\"changeState()\" [checked]=\"data.done\"></mat-checkbox>\n        <mat-icon (click)=\"edit()\" class=\"icon\">edit</mat-icon>\n        <mat-icon (click)=\"delete()\" class=\"icon\">delete</mat-icon>\n      </div>\n    </div>  "
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-e41a77a5990cedeee20474adf9af3dc444a90061aa0f1c09743a57f9740b6aee557b73a72523792e33f8e8dd5d7a6f39698c29b02293407092ca5f58d1f76b02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule, routes } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ContainerComponent } from './container/container/container.component';\nimport { TodoModule } from './modules/todo/todo.module';\nimport { MaterialModule } from './modules/material/material.module';\nimport { StatisticModule } from './modules/statistic/statistic.module';\nimport { DataProviderService } from './services/dataProvider/data-provider.service';\nimport { STORAGE_TOKEN } from 'src/tokens/storageToken';\nimport { ActivatedRouteSnapshot, RouterLink, RouterModule } from '@angular/router';\nimport { LocalStorageService } from './helpers/localStorage.class';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ContainerComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MaterialModule,\n    RouterModule,\n    \n  ],\n  providers: [\n    { provide: STORAGE_TOKEN, useClass: LocalStorageService},\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-a4275360973cf4aa0726569a59f7ee25d29966d06a73e06f3e7660f11428c2c7fbfdb0bad0d4ddd9bf0b28f3e0507f378635256a496a9284dc611df009f13098",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TodoContainerComponent } from './modules/todo/todo-container/todo-container.component';\nimport { ContainerComponent } from './container/container/container.component';\n\nexport const routes: Routes = [\n  /*\n    {\n      path: 'todo',\n      loadChildren: () => import('./modules/todo/todo.module').then(m => m.TodoModule)\n    },\n    {\n      path: 'statistics',\n      loadChildren: () => import('./modules/statistic/statistic.module').then(m => m.StatisticModule)\n    },\n    {\n      path: '',\n      redirectTo: '/todo',\n      pathMatch: 'full'\n    }\n    */\n\n    {\n      path: '',\n      component: ContainerComponent,\n      children: [ \n        { path: 'todo', loadChildren: () => \"import('./modules/todo/todo.module').then(m => m.TodoModule)\" },\n        { path: 'statistics', loadChildren: () => \"import('./modules/statistic/statistic.module').then(m => m.StatisticModule)\" },\n        { path: '', redirectTo: 'todo', pathMatch: 'full' } // DomyÅ›lna Å›cieÅ¼ka do 'todo'\n      ]\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-c90a3fddfbf97184a970f6f0a22dbaf77f42c3b91437f0e3b2d7221a0da1aeaa714d4f18ab7465d0e4f9079cb70bf97a3dbbb26aa0aa984c108bc6aed672bc9e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/material/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatCardModule} from '@angular/material/card';\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    MatIconModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatMenuModule,\n    MatTabsModule,\n    MatCardModule\n\n  ],\n  exports: [\n    MatIconModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatCheckboxModule,\n    MatMenuModule,\n    MatTabsModule,\n    MatCardModule\n  ]\n})\nexport class MaterialModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticModule",
            "id": "module-StatisticModule-c3eade34ec0d11be4d8575ba0be28ed1be9c491e68f03c97bd6c386f42166d6e1ace7d0c54c542d1f4dc4f44b45ffd8cca4f6eeba48736b57138bb86655c7f44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/statistic/statistic.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StatisticContainerComponent } from './statistic-container/statistic-container.component';\nimport { ChartComponent } from './statistic-container/chart/chart.component';\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\nimport { MaterialModule } from '../material/material.module';\nimport { StatisticService } from './services/statistic.service';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { StatisticsRoutingModule } from './statistic-routing.module';\nimport { RouterModule } from '@angular/router';\n\n\n\n@NgModule({\n  declarations: [\n    StatisticContainerComponent,\n    ChartComponent\n  ],\n  imports: [\n    CommonModule,\n    NgxChartsModule,\n    MaterialModule,\n    StatisticsRoutingModule,\n    RouterModule,\n  ],\n  exports: [\n    StatisticContainerComponent\n  ],\n  providers: [\n    {provide: MODULE_TOKEN, useValue: 'Statistic'},\n    LoggerService,\n    StatisticService\n  ]\n})\nexport class StatisticModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "LoggerService"
                        },
                        {
                            "name": "StatisticService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "StatisticContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "StatisticsRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatisticContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatisticsRoutingModule",
            "id": "module-StatisticsRoutingModule-bf833934cf2bf89a8a4157c5ee2acda10080b15203a647a86fe1dbf7f6a2eae4b1116aa87f0ec8ef19579bbaa78e42dff5e2e577cafa58bff87054b66e7d93f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/statistic/statistic-routing.module.ts",
            "methods": [],
            "sourceCode": "import { RouterModule, Routes } from \"@angular/router\";\r\nimport { StatisticContainerComponent } from \"./statistic-container/statistic-container.component\";\r\nimport { NgModule } from \"@angular/core\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n      path: '',\r\n      component: StatisticContainerComponent\r\n    }\r\n  ];\r\n  \r\n  @NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class StatisticsRoutingModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoModule",
            "id": "module-TodoModule-bffc70f919fe549dded2d7cd489c630388679830100fbbb89fc2d2a94f7470f6ef72abf71161bed0aa30424945d77f113235035eb4101e39deb27b5ac3b40e2c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/todo/todo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TodoContainerComponent } from './todo-container/todo-container.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {\n  CdkDragDrop,\n  moveItemInArray,\n  transferArrayItem,\n  CdkDrag,\n  CdkDropList,\n} from '@angular/cdk/drag-drop';\nimport { MaterialModule } from '../material/material.module';\nimport { ItemDialogComponent } from './dialogs/item-dialog/item-dialog.component';\nimport { ColumnDialogComponent } from './dialogs/column-dialog/column-dialog.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { TodoService } from './services/todo.service';\nimport { TodoColumnComponent } from './todo-container/todo-column/todo-column.component';\nimport { TodoTaskComponent } from './todo-container/todo-task/todo-task.component';\nimport { ColumnService } from './services/column.service';\nimport { TaskService } from './services/task.service';\nimport { MODULE_TOKEN } from 'src/tokens/moduleToken';\nimport { LoggerService } from 'src/app/services/logger.service';\nimport { TodoRoutingModule } from './todo-routing.module';\nimport { RouterModule } from '@angular/router';\n\n\n@NgModule({\n  declarations: [\n    TodoContainerComponent,\n    ItemDialogComponent,\n    ColumnDialogComponent,\n    TodoColumnComponent,\n    TodoTaskComponent,\n  ],\n  imports: [\n    CommonModule,\n    DragDropModule,\n    CdkDrag,\n    CdkDropList,\n    MaterialModule,\n    ReactiveFormsModule,\n    TodoRoutingModule,\n    RouterModule\n  ],\n  providers: [\n    ColumnService,\n    TaskService,\n    { provide: MODULE_TOKEN, useValue: 'TODO' },\n    LoggerService,\n    TodoService\n    //{ provide: MODULE_TOKEN, useValue: 'TODO' },\n   // LoggerService,\n   // TodoService,\n  ],\n  exports: [\n    TodoContainerComponent\n  ]\n})\nexport class TodoModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ColumnService"
                        },
                        {
                            "name": "LoggerService"
                        },
                        {
                            "name": "TaskService"
                        },
                        {
                            "name": "TodoService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ColumnDialogComponent"
                        },
                        {
                            "name": "ItemDialogComponent"
                        },
                        {
                            "name": "TodoColumnComponent"
                        },
                        {
                            "name": "TodoContainerComponent"
                        },
                        {
                            "name": "TodoTaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CdkDrag"
                        },
                        {
                            "name": "CdkDropList"
                        },
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "TodoRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TodoContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoRoutingModule",
            "id": "module-TodoRoutingModule-316bbc8be6f7307d1976c4caa8bec5ca1b63c3077b17e6ced1e0d051250c976e54c2fdfedbfb49c0220188449bf029e61c30f00f9fd2a6bea7886a89ff10cbc2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/todo/todo-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { TodoContainerComponent } from \"./todo-container/todo-container.component\";\r\n\r\nconst routes: Routes = [\r\n    {\r\n      path: '',\r\n      component: TodoContainerComponent\r\n    }\r\n  ];\r\n  \r\n  @NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n  })\r\n  export class TodoRoutingModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "columnMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/statistic/statistic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Column[]",
                "defaultValue": "[\r\n    {id: 1, name: 'example1', tasks: [{id: '1',title: 'exampletask1',description: 'example',done: true, priority: Priority.HIGH},{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]},\r\n    {id: 2, name: 'example2', tasks: [{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]}\r\n  ]"
            },
            {
                "name": "columnMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Column[]",
                "defaultValue": "[\r\n    {id: 1, name: 'example1', tasks: [{id: '1',title: 'exampletask1',description: 'example',done: true, priority: Priority.HIGH},{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]},\r\n    {id: 2, name: 'example2', tasks: [{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]}\r\n  ]"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/statistic/statistic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n    component: StatisticContainerComponent, // Komponent, ktÃ³ry chcesz wyÅ›wietliÄ‡\r\n    template: `<app-statistic-container></app-statistic-container>`, // Szablon do wyrenderowania komponentu\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n    component: TodoContainerComponent, // Komponent, ktÃ³ry chcesz wyÅ›wietliÄ‡\r\n    template: `<app-todo-container></app-todo-container>`, // Szablon do wyrenderowania komponentu,\r\n    import: [MaterialModule]\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.beta.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    token: 'beta'\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.dev.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    token: 'dev'\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true,\r\n    token: 'prod'\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false,\r\n    token: '',\r\n    // apiUrl,\r\n    // env: env.PROD\r\n  }"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "MODULE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tokens/moduleToken.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('module_token')"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "statisticMoc2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/statistic/statistic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StatisticData[]",
                "defaultValue": "[\r\n    {name: 'example1', dataForChart: [{name: Priority.HIGH, value: 10},{name: Priority.MEDIUM, value: 30},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example2', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 80},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example3', dataForChart: [{name: Priority.HIGH, value: 40},{name: Priority.MEDIUM, value: 50},{name: Priority.LOW, value: 70}]}\r\n]"
            },
            {
                "name": "statisticMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/statistic/statistic.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StatisticData[]",
                "defaultValue": "[\r\n    {name: 'example1', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 10},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example2', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 90},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example3', dataForChart: [{name: Priority.HIGH, value: 40},{name: Priority.MEDIUM, value: 50},{name: Priority.LOW, value: 70}]}\r\n]"
            },
            {
                "name": "STORAGE_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/tokens/storageToken.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<StorageAbstractService>('storage')"
            },
            {
                "name": "transform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/logger.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(user: UserInterface, isActive: boolean = true): ProfileInterface => {\n  return {\n    name: user.name,\n    profileUrl: `/profiles/${user.name}`,\n    isActive\n  }\n}"
            }
        ],
        "functions": [
            {
                "name": "arrayEqual",
                "file": "src/app/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr1",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "arr2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "arr1",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "arr2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateUUID",
                "file": "src/app/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "string"
            }
        ],
        "typealiases": [
            {
                "name": "ChartData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/modules/statistic/services/statistic.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ColumnDialogData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/column.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ColumnForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/column.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ENV",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "StatisticData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/modules/statistic/services/statistic.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TaskDialogData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/task.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TaskForm",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/types/task.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "Priority",
                "childs": [
                    {
                        "name": "HIGH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "high"
                    },
                    {
                        "name": "MEDIUM",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "medium"
                    },
                    {
                        "name": "LOW",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "low"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/types/task.types.ts"
            }
        ],
        "groupedVariables": {
            "src/app/modules/statistic/statistic.stories.ts": [
                {
                    "name": "columnMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/statistic/statistic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {id: 1, name: 'example1', tasks: [{id: '1',title: 'exampletask1',description: 'example',done: true, priority: Priority.HIGH},{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]},\r\n    {id: 2, name: 'example2', tasks: [{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]}\r\n  ]"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/statistic/statistic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: StatisticContainerComponent, // Komponent, ktÃ³ry chcesz wyÅ›wietliÄ‡\r\n    template: `<app-statistic-container></app-statistic-container>`, // Szablon do wyrenderowania komponentu\r\n})"
                },
                {
                    "name": "statisticMoc2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/statistic/statistic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatisticData[]",
                    "defaultValue": "[\r\n    {name: 'example1', dataForChart: [{name: Priority.HIGH, value: 10},{name: Priority.MEDIUM, value: 30},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example2', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 80},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example3', dataForChart: [{name: Priority.HIGH, value: 40},{name: Priority.MEDIUM, value: 50},{name: Priority.LOW, value: 70}]}\r\n]"
                },
                {
                    "name": "statisticMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/statistic/statistic.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StatisticData[]",
                    "defaultValue": "[\r\n    {name: 'example1', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 10},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example2', dataForChart: [{name: Priority.HIGH, value: 60},{name: Priority.MEDIUM, value: 90},{name: Priority.LOW, value: 20}]},\r\n    {name: 'example3', dataForChart: [{name: Priority.HIGH, value: 40},{name: Priority.MEDIUM, value: 50},{name: Priority.LOW, value: 70}]}\r\n]"
                }
            ],
            "src/app/modules/todo/todo-container/todo-container.stories.ts": [
                {
                    "name": "columnMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {id: 1, name: 'example1', tasks: [{id: '1',title: 'exampletask1',description: 'example',done: true, priority: Priority.HIGH},{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]},\r\n    {id: 2, name: 'example2', tasks: [{id: '2',title: 'exampletask2',description: 'example',done: false, priority: Priority.MEDIUM}]}\r\n  ]"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: TodoContainerComponent, // Komponent, ktÃ³ry chcesz wyÅ›wietliÄ‡\r\n    template: `<app-todo-container></app-todo-container>`, // Szablon do wyrenderowania komponentu,\r\n    import: [MaterialModule]\r\n})"
                }
            ],
            "src/environments/environment.beta.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.beta.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    token: 'beta'\r\n  }"
                }
            ],
            "src/environments/environment.dev.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.dev.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    token: 'dev'\r\n  }"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true,\r\n    token: 'prod'\r\n  }"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false,\r\n    token: '',\r\n    // apiUrl,\r\n    // env: env.PROD\r\n  }"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "src/tokens/moduleToken.ts": [
                {
                    "name": "MODULE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tokens/moduleToken.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('module_token')"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ],
            "src/tokens/storageToken.ts": [
                {
                    "name": "STORAGE_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/tokens/storageToken.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<StorageAbstractService>('storage')"
                }
            ],
            "src/app/services/logger.service.ts": [
                {
                    "name": "transform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/logger.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(user: UserInterface, isActive: boolean = true): ProfileInterface => {\n  return {\n    name: user.name,\n    profileUrl: `/profiles/${user.name}`,\n    isActive\n  }\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/helpers/helpers.ts": [
                {
                    "name": "arrayEqual",
                    "file": "src/app/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr1",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "arr2",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "arr1",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arr2",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateUUID",
                    "file": "src/app/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/types/task.types.ts": [
                {
                    "name": "Priority",
                    "childs": [
                        {
                            "name": "HIGH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "high"
                        },
                        {
                            "name": "MEDIUM",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "medium"
                        },
                        {
                            "name": "LOW",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "low"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/types/task.types.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/modules/statistic/services/statistic.service.ts": [
                {
                    "name": "ChartData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/modules/statistic/services/statistic.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "StatisticData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/modules/statistic/services/statistic.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/app/types/column.types.ts": [
                {
                    "name": "ColumnDialogData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/column.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ColumnForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/column.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "ENV",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/types/task.types.ts": [
                {
                    "name": "TaskDialogData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/task.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TaskForm",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/types/task.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "ContainerComponent",
                        "children": [
                            {
                                "path": "todo",
                                "loadChildren": "./modules/todo/todo.module#TodoModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/modules/todo/todo-routing.module.ts",
                                                "module": "TodoRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "TodoContainerComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "TodoModule"
                                    }
                                ]
                            },
                            {
                                "path": "statistics",
                                "loadChildren": "./modules/statistic/statistic.module#StatisticModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/modules/statistic/statistic-routing.module.ts",
                                                "module": "StatisticsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "",
                                                        "component": "StatisticContainerComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "StatisticModule"
                                    }
                                ]
                            },
                            {
                                "path": "",
                                "redirectTo": "todo",
                                "pathMatch": "full"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/container/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/helpers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageAbstractService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "arrayEqual",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/helpers.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateUUID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/helpers/localStorage.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/logger.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Logger",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/services/statistic.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatisticService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic-container/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic-container/statistic-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatisticContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statisticMoc2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/statistic/statistic.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "statisticMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/dialogs/column-dialog/column-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColumnDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/dialogs/item-dialog/item-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ItemDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/services/column.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColumnService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/services/task.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TaskService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/todo-container/todo-column/todo-column.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoColumnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/todo-container/todo-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/todo-container/todo-container.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo/todo-container/todo-task/todo-task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoTaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dataProvider/data-provider.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataProviderService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/logger.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggerService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/logger.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileInterface",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/logger.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserInterface",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/logger.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/storage/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/types/column.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/types/task.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.beta.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.dev.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/tokens/moduleToken.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODULE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/tokens/storageToken.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}